#!/bin/bash

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
. $SCRIPT_DIR/utils

# Default configurations
DEFAULT_FQBN="esp8266:esp8266:d1_mini_clone"
DEFAULT_BAUD="115200"
DEFAULT_PORT=$(ls /dev/cu.usbserial-* 2>/dev/null | head -n 1)
INO_FILE=""
MONITOR=1

# Usage function
usage() {
    report_status "info" "Usage: $0 [options] -f <path_to_ino_file>"
    echo -e "${WHT}Options:"
    echo -e "  -m                 ${YEL}Start monitoring after upload.${WHT}"
    echo -e "  -b <fqbn>          ${YEL}Specify board type (default: $DEFAULT_FQBN).${WHT}"
    echo -e "  -f <path_to_ino>   ${YEL}Specify path to the .ino file (required).${WHT}"
    echo -e "  -h                 ${YEL}Show this help message.${WHT}"
    exit 1
}

# Parse arguments
while getopts "mb:f:h" opt; do
    case "$opt" in
    m) MONITOR=1 ;;
    b) FQBN="$OPTARG" ;;
    f) INO_FILE="$OPTARG" ;;
    h) usage ;;
    *) usage ;;
    esac
done

# Use default FQBN if none is provided
FQBN=${FQBN:-$DEFAULT_FQBN}

# Validate .ino file path
if [ -z "$INO_FILE" ]; then
    report_status "error" "Path to .ino file is required. Use -f <path_to_ino_file>."
    usage
fi

if [ ! -f "$INO_FILE" ]; then
    report_status "error" "Specified .ino file does not exist: $INO_FILE"
    exit 1
fi

# Check if Arduino CLI is installed
if ! command -v arduino-cli >/dev/null 2>&1; then
    report_status "error" "arduino-cli is not installed. Install it first."
    exit 1
fi

# Ensure configuration and ESP8266 core are set up
report_status "info" "Setting Up Arduino CLI and ESP8266 Core"
arduino-cli config init --overwrite >/dev/null 2>&1
arduino-cli config set board_manager.additional_urls https://arduino.esp8266.com/stable/package_esp8266com_index.json >/dev/null

arduino-cli core update-index >/dev/null
if ! arduino-cli core list | grep -q "esp8266"; then
    report_status "info" "Installing ESP8266 Core..."
    arduino-cli core install esp8266:esp8266 >/dev/null
else
    report_status "success" "ESP8266 Core is already installed."
fi

# Retrieve valid FQBNS
VALID_FQBNS=$(arduino-cli board listall | grep "^.*esp8266:esp8266" | awk '{print $NF}')
VALID_FQBNS_ARRAY=($VALID_FQBNS)

# Validate FQBN or prompt the user to select
if ! echo "$VALID_FQBNS" | grep -q "^$FQBN$"; then
    report_status "error" "Invalid FQBN: '$FQBN'. Please select a valid board type:"
    for i in "${!VALID_FQBNS_ARRAY[@]}"; do
        echo -e "${YEL}$((i + 1)). ${VALID_FQBNS_ARRAY[$i]}${WHT}"
    done
    echo -e "${YEL}Enter the number corresponding to your board:${WHT}"
    read -r FQBN_SELECTION
    if [ -z "$FQBN_SELECTION" ] || ! [[ "$FQBN_SELECTION" =~ ^[0-9]+$ ]] || [ "$FQBN_SELECTION" -le 0 ] || [ "$FQBN_SELECTION" -gt "${#VALID_FQBNS_ARRAY[@]}" ]; then
        report_status "error" "Invalid selection. Exiting."
        exit 1
    fi
    FQBN="${VALID_FQBNS_ARRAY[$((FQBN_SELECTION - 1))]}"
fi

# Select the serial port
if [ -z "$DEFAULT_PORT" ]; then
    report_status "info" "No default port found."
    SERIAL_PORTS=($(ls /dev/tty.* | grep -i usb))
    if [ ${#SERIAL_PORTS[@]} -eq 0 ]; then
        report_status "error" "No serial ports found. Please connect a device."
        exit 1
    elif [ ${#SERIAL_PORTS[@]} -eq 1 ]; then
        SERIAL_PORT="${SERIAL_PORTS[0]}"
    else
        report_status "info" "Select Serial Port:"
        select port in "${SERIAL_PORTS[@]}"; do
            SERIAL_PORT="$port"
            break
        done
    fi
else
    SERIAL_PORT="$DEFAULT_PORT"
    report_status "success" "Using default port: $SERIAL_PORT"
fi

# Compile the sketch
report_status "info" "Compiling Sketch: $INO_FILE"
if ! arduino-cli compile --fqbn "$FQBN" "$INO_FILE"; then
    report_status "error" "Compilation Failed."
    exit 1
else
    report_status "success" "Compilation Successful."
fi

# Upload the sketch
report_status "info" "Uploading Sketch to Board on Port: $SERIAL_PORT"
if ! arduino-cli upload -p "$SERIAL_PORT" --fqbn "$FQBN" "$INO_FILE"; then
    report_status "error" "Upload Failed."
    exit 1
else
    report_status "success" "Upload Successful."
fi

# Start monitoring if requested
if [ "$MONITOR" -eq 1 ]; then
    report_status "info" "Starting Serial Monitor on Port: $SERIAL_PORT"
    arduino-cli monitor -p "$SERIAL_PORT" --config "$DEFAULT_BAUD"
fi

report_status "success" "Done!"
